/**
 *  ------------------------------------ Android config build version ------------------------------------
 */

def build_versions = [:]
build_versions.min_sdk = 21
build_versions.target_sdk = 30
build_versions.compile_sdk = 30
build_versions.version_code = 1
build_versions.version_name = "1.0.1"
ext.build_versions = build_versions

ext.deps = [:]

def versions = [:]

/**
 * Gradle {@see https://gradle.org/}
 */
versions.android_gradle_plugin = '4.0.1'

/**
 * Add repositories {@see build.gradle}
 * @param handler
 * @return repositories
 */
static def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.mavenCentral()
    handler.maven { url 'https://maven.google.com' }
    handler.maven { url 'https://plugins.gradle.org/m2/' }
}

ext.addRepos = this.&addRepos

/**
 * ------------------------------------ Versions ------------------------------------
 */

/**
 * Google
 */
// https://mvnrepository.com/artifact/androidx.appcompat/appcompat
versions.androidx = "1.0.0"
versions.annotation = "1.1.0"
versions.appcompat = "1.3.0-alpha02"
versions.activity = "1.2.0-alpha08"
// https://mvnrepository.com/artifact/androidx.viewpager2/viewpager2
versions.viewpager2 = "1.1.0-alpha01"
versions.exifinterface = "1.3.0-alpha01"
versions.recyclerview = "1.2.0-alpha06"
versions.swiperefreshlayout = "1.2.0-alpha01"

versions.fragment = "1.3.0-alpha08"

// https://mvnrepository.com/artifact/com.android.support.constraint/constraint-layout
versions.constraint_layout = "2.1.0-alpha1"
// https://mvnrepository.com/artifact/com.google.dagger/dagger
versions.dagger = "2.28.1"
// https://mvnrepository.com/artifact/com.google.guava/guava
versions.guava_android = "28.2-android"
versions.guava_jre = "28.2-jre"
// https://mvnrepository.com/artifact/androidx.multidex/multidex
versions.multidex = "2.0.1"
// https://mvnrepository.com/artifact/com.google.code.gson/gson
versions.gson = "2.8.6"
// https://mvnrepository.com/artifact/androidx.browser/browser
versions.customtabs = "1.3.0-alpha05"
// https://mvnrepository.com/artifact/com.google.android/flexbox
versions.flexbox = "2.0.1"
// https://mvnrepository.com/artifact/com.google.android.material/material
versions.material = "1.3.0-alpha04"
// https://mvnrepository.com/artifact/androidx.concurrent/concurrent-futures/1.1.0-alpha01
versions.concurrent = "1.1.0-alpha01"

/**
 * Android Jetpack
 * Architecture Components
 * https://developer.android.com/topic/libraries/architecture/adding-components
 */
// https://mvnrepository.com/artifact/androidx.paging/paging-runtime
versions.paging = "3.0.0-alpha06"
// https://mvnrepository.com/artifact/androidx.work/work-runtime
versions.work = "2.5.0-alpha01"
// https://mvnrepository.com/artifact/androidx.room/room-runtime
versions.room = "2.3.0-alpha02"
// https://mvnrepository.com/artifact/androidx.lifecycle/lifecycle-runtime
versions.lifecycle = "2.3.0-alpha07"
versions.lifecycle_extension = "2.2.0"
versions.lifecycle_livedata_ktx = "2.3.0-alpha07"
// https://mvnrepository.com/artifact/androidx.navigation/navigation-fragment-ktx/2.3.0
versions.navigation = "2.3.0"

/**
 * Google Service
 */
// https://developer.android.com/guide/playcore

/*The Play Core Library is your app’s runtime interface with the Google Play Store.
Some of the things you can do with Play Core include the following:

Download additional language resources
Manage delivery of dynamic feature modules
Manage delivery of asset packs
Trigger in-app updates*/
versions.play_core = "1.7.2"

/*Maps SDK for Android v.3.0.0 BETA*/
versions.play_services_location="17.0.0"
versions.play_services_gcm="17.0.0"
versions.play_services_base="17.2.1"
versions.play_services_basement="17.2.0"

/*Maps SDK V2*/
versions.play_services_maps="17.0.0"
versions.play_services_places = "2.0.0"

/*https://developers.google.com/identity/sms-retriever/request*/
versions.installreferrer = "1.1"

/**
 * https://firebase.google.com/docs/cloud-messaging/android/client
 */
versions.firebase_messaging = "20.2.0"
versions.firebase_dynamic_links = "19.1.0"
versions.firebase_analytics = "17.4.3"
versions.firebase_config = "19.1.4"

/**
 * List of KTX extensions
 * https://developer.android.com/kotlin/ktx/extensions-list
 */
versions.core_ktx = "1.2.0"
versions.activity_ktx = "1.0.0"
versions.collection_ktx = "1.1.0"

/**
 * ExoPlayer is an application level media player for Android.
 * It provides an alternative to Android’s MediaPlayer API for playing audio and video both locally and over the Internet.
 * ExoPlayer supports features not currently supported by Android’s MediaPlayer API,
 * including DASH and SmoothStreaming adaptive playbacks. Unlike the MediaPlayer API,
 * ExoPlayer is easy to customize and extend, and can be updated through Play Store application updates.
 * {@see https://github.com/google/ExoPlayer}
 * {@see https://google.github.io/ExoPlayer/}
 * https://mvnrepository.com/artifact/com.google.android.exoplayer/exoplayer
 */
versions.exoplayer = "2.11.7"

/**
 * Facebook
 * https://github.com/facebook/fresco
 *
 * https://github.com/facebook/fresco/issues/2365 Fixbug Error
 * java.lang.NoClassDefFoundError: Failed resolution of: Landroidx/core/util/Pools$SynchronizedPool;
 * https://mvnrepository.com/artifact/com.facebook.fresco/fresco
 */
versions.fresco = "2.3.0"
/**
 * http://facebook.github.io/stetho/
 * A debug bridge for Android applications
 * Stetho is a sophisticated debug bridge for Android applications.
 * When enabled, developers have access to the Chrome Developer Tools feature natively part of the Chrome desktop browser.
 * Developers can also choose to enable the optional dumpapp tool which offers a powerful command-line interface to application internals.
 *
 * Chrome DevTools
 * The integration with the Chrome DevTools frontend is implemented using a client/server protocol which the Stetho software provides for your application.
 * Once your application is integrated, simply navigate to chrome://inspect and click "Inspect" to get started!
 *
 * Network Inspection
 * Network inspection is possible with the full spectrum of Chrome Developer Tools features,
 * including image preview, JSON response helpers, and even exporting traces to the HAR format.
 */
versions.stetho = "1.5.1"

/**
 * Square {@see http://square.github.io/}
 * https://mvnrepository.com/artifact/com.squareup.retrofit2/retrofit
 */
versions.retrofit = "2.9.0"
versions.okhttp = "4.8.1"
versions.timber = "4.7.1"

/**
 * Bumptech {@see https://bumptech.github.io/glide/}
 *  https://mvnrepository.com/artifact/com.github.bumptech.glide/glide
 */
versions.glide = "4.11.0"

/**
 * ReactiveX {@see http://reactivex.io/}
 * https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxjava
 * https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxandroid
 */
versions.rxjava2 = "2.2.13"
versions.rx_android = "2.1.1"
versions.rxbinding = "3.1.0"

/**
 * Automatic binding+disposal of RxJava 2 streams. https://uber.github.io/AutoDispose/
 * https://github.com/uber/AutoDispose
 * https://mvnrepository.com/artifact/com.uber.autodispose/autodispose
 */
versions.autodispose = "0.7.0"

/**
 * Render After Effects animations natively on Android and iOS, Web, and React Native http://airbnb.io/lottie/
 * https://mvnrepository.com/artifact/com.airbnb.android/lottie
 */
versions.lottie = "3.0.7"

/**
 * Apache Commons Net
 * Apache Commons Net™ library implements the client side of many basic Internet protocols.
 * The purpose of the library is to provide fundamental protocol access, not higher-level abstractions.
 * Therefore, some of the design violates object-oriented design principles.
 * Our philosophy is to make the global functionality of a protocol accessible
 * (e.g., TFTP send file and receive file) when possible, but also provide access to the fundamental
 * protocols where applicable so that the programmer may construct his own custom implementations
 * (e.g, the TFTP packet classes and the TFTP packet send and receive methods are exposed).
 *
 * Features
 * Supported protocols include:
 *
 * FTP/FTPS
 * FTP over HTTP (experimental)
 * NNTP
 * SMTP(S)
 * POP3(S)
 * IMAP(S)
 * Telnet
 * TFTP
 * Finger
 * Whois
 * rexec/rcmd/rlogin
 * Time (rdate) and Daytime
 * Echo
 * Discard
 * NTP/SNTP
 *
 * http://commons.apache.org/proper/commons-net/
 * https://mvnrepository.com/artifact/commons-net/commons-net
 */
versions.commons_net = "3.6"

/**
 * A memory leak detection library for Android and Java.
 * https://github.com/square/leakcanary
 */
versions.leakcanary = "1.6.3"

/**
 * Library support for Kotlin coroutines with multiplatform support. This is a companion version for Kotlin 1.3.20 release.
 */
versions.kotlinx_coroutines_core = "1.4.2"

versions.kotlin_reflect = "1.3.61"

versions.joda_time = "2.10.2"
versions.joda_time_no_tzdb = "2.10.2:no-tzdb"

/**
 * Java implementation of JSON Web Token (JWT)
 * https://github.com/auth0/java-jwt
 * https://github.com/auth0/JWTDecode.Android
 * https://jwt.io/
 */
versions.java_jwt = "3.9.0"
versions.jwtdecode = "1.4.0"

versions.camerax = "1.0.0-beta01"

versions.eventbus = "3.2.0"

versions.libphonenumber = "8.12.3"

versions.media2 = "1.0.3"

versions.mqtt = "1.1.1"

/**
 * ------------------------------------ Dependencies ------------------------------------
 */
def deps = [:]

/**
 * Android gradle
 */
deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"

/**
 * https://developer.android.com/jetpack/androidx/versions
 */
def androidx = [:]
androidx.annotations = "androidx.annotation:annotation:$versions.annotation"
androidx.app_compat = "androidx.appcompat:appcompat:$versions.appcompat"
androidx.activity = "androidx.activity:activity:$versions.activity"
androidx.recyclerview = "androidx.recyclerview:recyclerview:$versions.recyclerview"
androidx.swiperefreshlayout = "androidx.swiperefreshlayout:swiperefreshlayout:$versions.swiperefreshlayout"
androidx.core_utils = "androidx.legacy:legacy-support-core-utils:$versions.androidx"
androidx.emoji = "androidx.emoji:emoji:$versions.androidx"
androidx.emoji_appcompat = "androidx.emoji:emoji-appcompat:$versions.androidx"
androidx.emoji_bundled = "androidx.emoji:emoji-bundled:$versions.androidx"
androidx.exifinterface = "androidx.exifinterface:exifinterface:$versions.exifinterface"
androidx.viewpager2 = "androidx.viewpager2:viewpager2:$versions.viewpager2"
androidx.concurrent = "androidx.concurrent:concurrent-futures:$versions.concurrent"
deps.androidx = androidx

deps.material = "com.google.android.material:material:$versions.material"
deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"

deps.multidex = "androidx.multidex:multidex:$versions.multidex"

deps.gson = "com.google.code.gson:gson:$versions.gson"

deps.customtabs = "androidx.browser:browser:$versions.customtabs"

deps.flexbox = "com.google.android:flexbox:$versions.flexbox"

deps.autodispose = "com.uber.autodispose:autodispose:$versions.autodispose"

deps.lottie = "com.airbnb.android:lottie:$versions.lottie"

def firebase = [:]
firebase.firebase_messaging = "com.google.firebase:firebase-messaging:$versions.firebase_messaging"
firebase.firebase_dynamic_links = "com.google.firebase:firebase-dynamic-links:$versions.firebase_dynamic_links"
firebase.firebase_analytics = "com.google.firebase:firebase-analytics:$versions.firebase_analytics"
firebase.firebase_config = "com.google.firebase:firebase-config-ktx:$versions.firebase_config"
deps.firebase = firebase

def google_service = [:]
google_service.play_services_location = "com.google.android.gms:play-services-location:$versions.play_services_location"
google_service.play_services_base = "com.google.android.gms:play-services-base:$versions.play_services_base"
google_service.play_services_gcm = "com.google.android.gms:play-services-gcm:$versions.play_services_gcm"
google_service.play_services_basement = "com.google.android.gms:play-services-basement:$versions.play_services_basement"
google_service.play_services_maps = "com.google.android.gms:play-services-maps:$versions.play_services_maps"
google_service.play_services_places = "com.google.android.libraries.places:places:$versions.play_services_places"
google_service.maps_utils = "com.google.maps.android:android-maps-utils-sdk-v3-compat:0.1"
google_service.vision = "com.google.firebase:firebase-ml-vision:24.0.3"
google_service.vision_face_model = "com.google.firebase:firebase-ml-vision-face-model:20.0.1"
google_service.play_core = "com.google.android.play:core:$versions.play_core"
google_service.installreferrer = "com.android.installreferrer:installreferrer:$versions.installreferrer"
deps.google_service = google_service

/**
 * Architecture Components
 */

deps.paging = "androidx.paging:paging-runtime:$versions.paging"
deps.paging_ktx = "androidx.paging:paging-runtime-ktx:$versions.paging"

/**
 * Android Architecture Components
 * {@see https://developer.android.com/topic/libraries/architecture/}
 * {@see https://developer.android.com/topic/libraries/architecture/adding-components}
 */
def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
room.guava = "androidx.room:room-guava:$versions.room"
room.ktx = "androidx.room:room-ktx:$versions.room"
room.coroutines = "androidx.room:room-coroutines:2.1.0-alpha04"
deps.room = room

def lifecycle = [:]
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
lifecycle.runtime_ktx = "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycle"
lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle_extension"
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
lifecycle.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle_livedata_ktx"
deps.lifecycle = lifecycle

def navigation = [:]
navigation.navigation_fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.navigation_ui_ktx = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
deps.navigation = navigation

def work = [:]
work.work_runtime = "androidx.work:work-runtime:$versions.work"
work.work_runtime_ktx = "androidx.work:work-runtime-ktx:$versions.work"
work.work_rxjava2 = "androidx.work:work-rxjava2:$versions.work"
deps.work = work

deps.exoplayer = "com.google.android.exoplayer:exoplayer:$versions.exoplayer"
deps.exoplayer_rtmp = "com.google.android.exoplayer:extension-rtmp:$versions.exoplayer"
deps.exoplayer_ffmpeg = "com.google.android.exoplayer:extension-ffmpeg:$versions.exoplayer"

/**
 * Guava {@see https://github.com/google/guava}
 */
def guava = [:]
guava.android = "com.google.guava:guava:$versions.guava_android"
guava.jre = "com.google.guava:guava:$versions.guava_jre"
deps.guava = guava

/**
 * Retrofit A type-safe HTTP client for Android and Java {@see http://square.github.io/retrofit/}
 */
def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
deps.retrofit = retrofit

/**
 * Okhttp An HTTP & HTTP/2 client for Android and Java applications {@see http://square.github.io/okhttp/}
 */
def okhttp = [:]
okhttp.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"
okhttp.okhttp = "com.squareup.okhttp3:okhttp:$versions.okhttp"
deps.okhttp = okhttp

deps.timber = "com.jakewharton.timber:timber:$versions.timber"

deps.commons_net = "commons-net:commons-net:$versions.commons_net"

/**
 * ReactiveX An API for asynchronous programming with observable streams
 * {@see https://github.com/ReactiveX/RxJava}
 * {@see https://github.com/ReactiveX/RxAndroid}
 */
def rx = [:]
rx.java2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"
rx.android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
deps.rx = rx

def rxbinding = [:]
rxbinding.rxbinding = "com.jakewharton.rxbinding3:rxbinding:$versions.rxbinding"
rxbinding.rxbinding_core = "com.jakewharton.rxbinding3:rxbinding-core:$versions.rxbinding"
rxbinding.rxbinding_appcompat = "com.jakewharton.rxbinding3:rxbinding-appcompat:$versions.rxbinding"
rxbinding.rxbinding_drawerlayout = "com.jakewharton.rxbinding3:rxbinding-drawerlayout:$versions.rxbinding"
rxbinding.rxbinding_leanback = "com.jakewharton.rxbinding3:rxbinding-leanback:$versions.rxbinding"
rxbinding.rxbinding_recyclerview = "com.jakewharton.rxbinding3:rxbinding-recyclerview:$versions.rxbinding"
rxbinding.rxbinding_slidingpanelayout = "com.jakewharton.rxbinding3:rxbinding-slidingpanelayout:$versions.rxbinding"
rxbinding.rxbinding_swiperefreshlayout = "com.jakewharton.rxbinding3:rxbinding-swiperefreshlayout:$versions.rxbinding"
rxbinding.rxbinding_viewpage = "com.jakewharton.rxbinding3:rxbinding-viewpager:$versions.rxbinding"
rxbinding.rxbinding_viewpager2 = "com.jakewharton.rxbinding3:rxbinding-viewpager2:$versions.rxbinding"
rxbinding.rxbinding_material = "com.jakewharton.rxbinding3:rxbinding-material:$versions.rxbinding"
deps.rxbinding = rxbinding

/**
 * Dagger is a fully static, compile-time dependency injection framework for both Java and Android.
 * It is an adaptation of an earlier version created by Square and now maintained by Google.
 * {@see https://google.github.io/dagger/}
 */
def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

/**
 * Glide is a fast and efficient image loading library for Android focused on smooth scrolling.
 * Glide offers an easy to use API, a performance and extensible resource decoding pipeline and automatic resource pooling.
 * {@see https://bumptech.github.io/glide/}
 */
def glide = [:]
glide.glide = "com.github.bumptech.glide:glide:$versions.glide"
glide.annotations = "com.github.bumptech.glide:annotations:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

/**
 * Facebook
 * https://developers.facebook.com/docs/facebook-login/android?locale=vi_VN
 */
def facebook = [:]
facebook.fresco = "com.facebook.fresco:fresco:$versions.fresco"
facebook.stetho = "com.facebook.stetho:stetho:$versions.stetho"
deps.facebook = facebook

def leakcanary = [:]
leakcanary.debug = "com.squareup.leakcanary:leakcanary-android:$versions.leakcanary"
leakcanary.release = "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakcanary"
// Optional, if you use support library fragments:
leakcanary.support_fragment = "com.squareup.leakcanary:leakcanary-support-fragment:$versions.leakcanary"
deps.leakcanary = leakcanary

deps.kotlinx_coroutines_core = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.kotlinx_coroutines_core"

deps.core_ktx = "androidx.core:core-ktx:$versions.core_ktx"
deps.activity_ktx = "androidx.activity:activity-ktx:$versions.activity_ktx"
deps.collection_ktx = "androidx.collection:collection-ktx:$versions.collection_ktx"
deps.fragment_ktx = "androidx.fragment:fragment-ktx:$versions.fragment"
deps.fragment = "androidx.fragment:fragment:$versions.fragment"

deps.kotlin_reflect = "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin_reflect"

deps.joda_time_no_tzdb = "joda-time:joda-time:$versions.joda_time_no_tzdb"
deps.joda_time = "joda-time:joda-time:$versions.joda_time"

deps.java_jwt = "com.auth0:java-jwt:$versions.java_jwt"
deps.jwtdecode = "com.auth0.android:jwtdecode:$versions.jwtdecode"

def camera = [:]
camera.camera2 = "androidx.camera:camera-camera2:$versions.camerax"
camera.core = "androidx.camera:camera-core:$versions.camerax"
camera.view = "androidx.camera:camera-view:1.0.0-alpha08"
camera.lifecycle = "androidx.camera:camera-lifecycle:$versions.camerax"
deps.camera = camera

deps.eventbus = "org.greenrobot:eventbus:$versions.eventbus"

deps.libphonenumber = "com.googlecode.libphonenumber:libphonenumber:$versions.libphonenumber"

def media2 =[:]
media2.session = "androidx.media2:media2-session:$versions.media2"
media2.widget = "androidx.media2:media2-widget:$versions.media2"
media2.player = "androidx.media2:media2-player:$versions.media2"
deps.media2 = media2


def mqtt = [:]
mqtt.client = "org.eclipse.paho:org.eclipse.paho.client.mqttv3:$versions.mqtt"
mqtt.service = "org.eclipse.paho:org.eclipse.paho.android.service:$versions.mqtt"
deps.mqtt = mqtt

ext.deps = deps
